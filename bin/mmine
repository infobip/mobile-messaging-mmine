#!/usr/bin/env ruby

require 'optionparser'
require 'mmine'

first_arg, *the_rest = ARGV

options = {}
integrate_parse = OptionParser.new do |opts|
    opts.banner = "Usage: mmine [command] [parameters]"
    opts.on("-p", "--project XCODE_PROJECT", "Path for your Xcode project file (.xcodeproj)") do |project|
        options[:project] = project
    end
    opts.on("-g", "--app-group APP_GROUP_ID", "App Group Id for your shared location. You generate it here firs: https://developer.apple.com/account/ios/identifier/applicationGroup. For more inforamtion see https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19") do |app_group|
        options[:"app-group"] = app_group
    end
    opts.on("-t", "--target MAIN_TARGET", "Name of main Xcode project target") do |target|
        options[:target] = target
    end
    opts.on("-v", "--verbose", "Make verbose logs visible") do |verbose|
        options[:verbose] = verbose
    end
    opts.on("-c", "--cordova", "Provide Cordova project specific settings.") do |cordova|
        options[:cordova] = cordova
    end
    opts.on("-x", "--xcframework", "Should Cordova project use xcframework or framework.") do |xcframework|
        options[:xcframework] = xcframework
    end
    opts.on("--swift-version", "--swift-version SWIFT_VER", "Provide Swift Language version for notification extension (by default 5)") do |ver|
        options[:"swift-version"] = ver
    end
    opts.on("-s", "--override-signing", "Override parameters for MobileMessagingNotificationExtension signing using build flags") do |override|
        options[:"override-signing"] = override
    end
    opts.on("-l", "--static-linkage", "If cocoapods static linkage used for MobileMessaging pods") do |static_linkage|
        options[:"static-linkage"] = static_linkage
    end
    opts.on("-r", "--react-native", "Provide React-Native specific settings") do |react_native|
        options[:"react-native"] = react_native
    end
    opts.on("--spm", "--spm", "If MobileMessaging is integrated using Swift Package Manager") do |spm|
            options[:"spm"] = spm
    end
    opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
    end
end

case first_arg
when "integrate"
    begin
        integrate_parse.parse!
        mandatory = [:"project", :"app-group", :"target"]
        missing = mandatory.select{ |param| options[param].nil? }
        unless missing.empty?
            raise OptionParser::MissingArgument.new(missing.join(', '))
        end
        integrator = NotificationExtensionIntegrator.new(options[:project], options[:"app-group"], options[:target], options[:cordova] || false, options[:xcframework] || false, options[:"swift-version"] || "5", options[:"override-signing"] || false, options[:"static-linkage"] || false, options[:"react-native"] || false, options[:"spm"] || false)
        integrator.logger = Logger.new(STDOUT)
        integrator.logger.formatter = proc do |severity, datetime, progname, msg|
            "#{severity}: #{msg}\n"
        end
        if options[:verbose]
            integrator.logger.level = Logger::DEBUG
        else
            integrator.logger.level = Logger::WARN
        end
        integrator.setup_notification_extension
    rescue OptionParser::InvalidOption, OptionParser::MissingArgument
        puts $!.to_s
        puts integrate_parse
        exit
    end
else
    if first_arg == nil
        puts "Please specify a command. For example 'mmine integrate'"
    else
        puts "Unknown command: #{first_arg}"
    end
end

